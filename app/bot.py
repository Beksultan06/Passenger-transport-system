import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from app.core.config import settings
from app.db.database import SessionLocal
from app.db.models.schedule import Schedule
from app.db.models.user import User
from sqlalchemy.orm import Session

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_chats = {}


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ chat_id
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_chats[message.from_user.id] = message.chat.id
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(commands=["schedule"])
async def get_schedule(message: types.Message):
    db = next(get_db())
    schedules = db.query(Schedule).all()

    if not schedules:
        await message.answer("‚ùó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        return

    schedule_list = ""
    for schedule in schedules:
        schedule_list += (
            f"üöç –ú–∞—Ä—à—Ä—É—Ç: {schedule.route_id}\n"
            f"üë®‚Äç‚úàÔ∏è –í–æ–¥–∏—Ç–µ–ª—å: {schedule.driver_id}\n"
            f"‚è∞ –í—Ä–µ–º—è: {schedule.departure_time} - {schedule.return_time}\n"
            f"üìÖ –î–∞—Ç–∞: {schedule.date}\n\n"
        )

    await message.answer(schedule_list)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º —Ä–µ–π—Å–µ
async def notify_driver(driver_id: int, message: str):
    if driver_id in user_chats:
        chat_id = user_chats[driver_id]
        await bot.send_message(chat_id, message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
@dp.message_handler(commands=["my_route"])
async def get_driver_route(message: types.Message):
    user_id = message.from_user.id
    db = next(get_db())
    user = db.query(User).filter(User.id == user_id).first()

    if not user:
        await message.answer("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    schedules = db.query(Schedule).filter(Schedule.driver_id == user.id).all()

    if not schedules:
        await message.answer("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
        return

    schedule_info = ""
    for schedule in schedules:
        schedule_info += (
            f"üöç –ú–∞—Ä—à—Ä—É—Ç: {schedule.route_id}\n"
            f"‚è∞ –í—Ä–µ–º—è: {schedule.departure_time} - {schedule.return_time}\n"
            f"üìÖ –î–∞—Ç–∞: {schedule.date}\n\n"
        )

    await message.answer(schedule_info)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def error_handler(update, exception):
    print(f"–û—à–∏–±–∫–∞: {exception}")
    return True

async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot():
    loop = asyncio.get_event_loop()
    loop.create_task(main())
